"""Make Focal Mech Plotsreads hash_df output file"""from obspy.imaging.beachball import beachballfrom obspy.core import UTCDateTimeimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltplt.close('all')file = 'casc2.out' #hash_df solutionsfm_save_dir = '/Users/travisalongi/Cascadia/Figures/Focal_mechs/Run3/' #where to save mechscolumns = ['evid','yr', 'mon', 'day', 'hr', 'mn', 'sec',           'ev_type', 'mag', 'mag_type',            'lat', 'lon', 'depth',           'loc_qual', 'rms', 'xy_err', 'z_err', 'time_err',           'n_arr', 'n_p', 'n_s',           'strike', 'dip', 'rake',           'fp_uncert', 'aux_uncert',           'n_p_fm', 'pct_misfit',           'fm_quality', 'prob_fm_solution', 'stn_dist_ratio',           's/p_ratio', 'avg_sp_misfit', 'mult_flag']hash_df = pd.read_csv(file, sep = '\s+', names = columns)hash_df = hash_df.set_index('evid') #index by event id#%%# make obspy beachballs for all HASH solutionsplt.ioff()for index, row in hash_df.iterrows():    date = UTCDateTime(row.yr, row.mon, row.day, row.hr, row.mn)    save_file = str(row.name) + '-' + date.strftime('%Y%m%dT%H%M') + 'Z' + str(row.depth) + str(row.fm_quality)        # plot beach balls and save        beachball([row.strike, row.dip, row.rake], facecolor = 'k',              outfile = fm_save_dir + 'Obspy_beachballs/' + save_file + '.png')plt.ion()#format focal mech data for use in gmtzeros = np.zeros(len(hash_df)).astype(int)gmt = hash_df[['lon', 'lat', 'depth', 'strike', 'dip', 'rake', 'mag']]gmt['depth'] = gmt['depth']gmt = gmt.assign(dummy_lon =  zeros, dummy_lat = zeros, quality = hash_df.fm_quality)file_name = 'cluster_r3_fm_gmt.csv' #save filefm_dir = '/Users/travisalongi/Cascadia/Data_tables/Focal_mechs/'gmt.to_csv(fm_dir + file_name,           sep = ' ',           index = False,           header = False)#%% Plot arrivals on stereonet and fault planes on steroenetimport mplstereonetimport sys, glob# special import or object oriented code sys.path.insert(1, '/Users/travisalongi/Cascadia/Codes')import event_stereonet as myevents = glob.glob('evid*') #get all eventsevids = []for event in events:    evid = event.split('.')[0][-4:] #get evid from file name        hash_event = hash_df.loc[int(evid)] #get hash information    he = hash_event    ev_str = str(evid) +'_'+ str(he.yr) +'-'+ str(he.mon) +'-'+ str(he.day) +'Z'+ str(he.depth) +'_'+ str(he.fm_quality) + '.png'        event = pd.read_csv(event, sep = '\s+') #read data        #change polarity convention from HASH to my plotting script    # event.POL = event.POL.replace(-1,0)        e = my.event(az = event.AZ.values,                  toa = event.TOA.values,                  pol = event.POL.values,                 stn = event.STN.values,                 event_id = evid,                  strike = hash_event.strike,                  dip = hash_event.dip,                  rake = hash_event.rake)    # e.reverse_pol('CM') # reverse polarity of CM stations    e.fm_plot()    fig.savefig(fm_save_dir + 'Fm_planes/' + 'my_' + ev_str)        e.beachball()    fig.savefig(fm_save_dir + 'Fm_planes/' + 'obspy_'+ ev_str)    evids.append(int(evid))new_df = hash_df.loc[evids]# new_df.to_csv(fm_save_dir + 'Fm_planes/hash_info.csv', sep = ',')#%% this plots all hash_df planes & saves themfile2 = 'casc2.out2'f2 = open(file2)r = f2.read()events = r.split('\n\n\n')#supress plot popups# plt.ioff()strikes = []dips = []rakes = []for event in events:   lines = event.split('\n')[:]   event_strings = lines[0].split()      fig = plt.figure()   ax = fig.add_subplot(111, projection = 'stereonet')   title_string = event_strings[0] +'_'+ event_strings[1] +'_'+  event_strings[2] +'_'+ event_strings[-3]   ax.set_title(title_string)   for line in lines[1:]:       l = line.split()       strike = float(l[0])       dip = float(l[1])       rake = float(l[2])              strikes.append(strike)       dips.append(dip)       rakes.append(rake)              ax.plane(float(l[0]), float(l[1]), color = 'k', alpha = 0.5)   fig.savefig(fm_save_dir + '/')plt.ion()