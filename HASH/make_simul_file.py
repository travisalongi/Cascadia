"""takes hypo71list file that was output from simulPSfind events of interestand only uses those"""import pandas as pdimport numpy as npimport os, re, datetimedef parse_event(event):    """        Parameters    ----------    event : simulPS event in hypo71format    Returns : event and phase information    -------    """    strings = event.split('\n')    event_info = strings[1]    phase_info = strings[4:]    return event_info, phase_info    def get_stn_arr(phase_info):    """gets stations as a list from phase information"""    stns = []    for arrival in phase_info:        if len(arrival)>1:            stns.append(arrival.split()[0])    return stnsdef split_into_deg_min(string):    """splits a coordinate into degrees, minutes format"""    degree, minute = re.split('[NSEW]', string)    return degree, minute        def parse_event_info(string, evid = '9999'):    """        Parameters    ----------    string : event information output from parse_event    Returns    -------    time : datetime object    string : this should be in event format    """    sp = string.split()        line = string    yr = '20' + line[1:3]    mon = line[3:5]    day = line[5:7]    hr = line[8:10]    mn = line[10:12]    sec = line[13:18]    lat = line[19:27]    lon = line[28:37]    depth = line[39:44]    mag = line[47:51]                        #check seconds --- not sure why this is happening    sec_int = int(sec.split('.')[0])    if sec_int > 59:        print('weird number for second ', string)        sec_int = 59        #change lat/lon format    lat_deg, lat_mn = split_into_deg_min(lat)    lon_deg, lon_mn = split_into_deg_min(lon)        time = datetime.datetime(int(yr),                             int(mon),                             int(day),                             int(hr),                             int(mn),                             sec_int)    location_uncertainty = 0.5    #format the string    string = '{}{}{}{}{}{:5.2f}{:2} {:5.2f}{:3} {:5.2f}{:5.2f}{:49}{:5.2f} {:5.2f}{:40}{:4.2f}{:6}{:>16}'.format(yr,                                                                                                                  mon,                                                                                                                  day,                                                                                                                 hr,                                                                                                                 mn,                                                                                                                 float(sec),                                            lat_deg, float(lat_mn),                                            lon_deg, float(lon_mn),                                            float(depth),                                            ' ',                                            location_uncertainty,                                            location_uncertainty,                                            ' ',                                            float(mag),                                            ' ',                                            evid)    return time, string# debug this definition with this exampleline = ' 140714 1032 24.83 40N35.33 124W 6.50  19.04   1.45  9          0.15\n'fake_evid = '1111'str_fmt = parse_event_info(line, fake_evid)[1]print(str_fmt)for i,s in enumerate(str_fmt):    print(i + 1,s)#%%data_dir = '/Users/travisalongi/Cascadia/Data_tables/Events/'#template match events of itnerestev_interest = pd.read_csv(data_dir + 'cm04R5_templates.txt',                           names = ['evid', 'time','lat','lon','dep','mag'],                          sep ='\s+')ev_interest['time'] = pd.to_datetime(ev_interest.time)# #ex hypo71list# north = open('north5.simul', mode = 'r')# n = north.read()# header_lines = n.split('\n')[:2]#entire hypo71listhypo = open(data_dir + 'hypo71list')hypo_data = hypo.read()events = hypo_data.split('\n\n\n')#files to writecasc_simul = open('casc.simul', mode = 'w')casc_phase = open('casc.phase', mode = 'w')#write the beginning lines# for header_line in header_lines:#     casc_simul.write(header_line +'\n')# casc_simul.write('\n')count = 0for i,event in enumerate(events[:]):    event_info, phase_info = parse_event(event) #split event up    ev_time, ev_str = parse_event_info(event_info) #handle event information    stations = get_stn_arr(phase_info) #get stations that recorded phase        dt_bool = np.abs(ev_time - ev_interest.time) < datetime.timedelta(seconds = 5)    if np.sum(dt_bool) > 0:        #write the event to  HASH event file                casc_simul.write(event + '\n\n\n')                #write phase info        ev_id = ev_interest.evid.astype(str).values[dt_bool][0]        t, ev_str = parse_event_info(event_info, evid = ev_id)        casc_phase.write(ev_str +'\n')        for station in stations:            stn_str = '{:4} CI  HHZ I \n'.format(station) #format the string            casc_phase.write(stn_str)                    casc_phase.write('\n')        count += 1        print('*** number of events not matched ', len(ev_interest) - count)hypo.close()casc_simul.close()casc_phase.close()